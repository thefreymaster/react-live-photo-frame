{"version":3,"sources":["hooks/index.tsx","components/Clock/index.tsx","providers/index.tsx","components/Controller/index.tsx","components/Video/index.tsx","api/index.ts","components/Device/index.tsx","components/Weather/Future.tsx","components/DigitalTime/index.tsx","components/Weather/index.tsx","components/DigitalClock/index.tsx","routes/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["useIsDay","Date","getHours","Clock","isDay","theme","background","center","seconds","minutes","hour","tick","smallTickWidth","largeTickWidth","secondHandWidth","minuteHandWidth","hourHandWidth","initialScale","in","Context","React","createContext","value","socket","emit","view","data","device","setDevice","s","useGlobalState","useContext","Provider","props","children","Controller","global","history","useHistory","useDisclosure","isOpen","onToggle","handleIsOpen","route","setTimeout","push","useLayoutEffect","to","display","flexDir","minW","color","fontSize","fontWeight","marginBottom","flexWrap","justifyContent","maxW","minH","onClick","m","colorScheme","isFullWidth","icon","Video","useQuery","axios","get","then","res","isLoading","size","console","log","id","autoPlay","controls","width","loop","muted","playsInline","src","type","Device","localStorage","setItem","Future","now","forcastTime","forcast","dt_txt","forcastIn","Math","abs","getTime","main","current","weather","alignItems","padding","margin","borderRadius","style","maxWidth","alt","temp","toFixed","DigitalTime","useState","toLocaleTimeString","time","setTime","Weather","humidity","name","wind","speed","deg","description","setWeather","list","setForcast","loading","setloading","getForcast","lat","long","a","process","fcast","getWeather","result","coord","lon","today","p","lineHeight","toDateString","pl","flexGrow","orientation","mt","mb","opacity","pt","transform","transition","map","item","index","DigitalClock","Routes","path","io","App","histroy","getItem","useEffect","on","height","window","innerHeight","innerWidth","isMobile","backgroundColor","position","bottom","right","minHeight","minWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.669c40f7.chunk.js","sourcesContent":["export const useIsDay = () => {\n    if (new Date().getHours() >= 6 && new Date().getHours() <= 17) {\n        return true\n    }\n    return false;\n}","import { ScaleFade } from '@chakra-ui/react';\nimport React from 'react';\nimport AnalogClock from 'react-analog-clock';\nimport { useIsDay } from '../../hooks/index';\n\nexport const Clock = () => {\n    const isDay = useIsDay();\n    const theme = {\n        background: isDay ? '#fff' : '#000',\n        center: isDay ? '#000' : '#fff',\n        seconds: isDay ? '#000' : '#fff',\n        minutes: isDay ? '#000' : '#fff',\n        hour: isDay ? '#000' : '#fff',\n        tick: isDay ? '#000' : '#fff',\n        smallTickWidth: 2,\n        largeTickWidth: 4,\n        secondHandWidth: 3,\n        minuteHandWidth: 6,\n        hourHandWidth: 8,\n    };\n    return (\n        <ScaleFade initialScale={0.9} in>\n            <AnalogClock theme={theme} />\n        </ScaleFade>\n    )\n}","import React from 'react';\n\nconst Context = React.createContext({\n    value: {},\n    socket: {\n        emit: (view: string, data: any) => { }\n    },\n    device: 'frame',\n    setDevice: (s: string) => {}\n});\n\nexport const useGlobalState = () => React.useContext(Context);\n\nexport const Provider = (props: { children: React.ReactNode, value: any }) => {\n    return (\n        <Context.Provider value={{ ...props as any }}>\n            {props.children}\n        </Context.Provider>\n    )\n}","import React from 'react';\nimport { IconButton, Text, ScaleFade, useDisclosure } from '@chakra-ui/react';\nimport { Box, Divider } from '@chakra-ui/layout';\nimport { AiOutlineClockCircle, AiFillVideoCamera } from 'react-icons/ai';\nimport { TiWeatherPartlySunny } from 'react-icons/ti';\nimport { FaDigitalTachograph } from 'react-icons/fa';\nimport { useIsDay } from '../../hooks/index';\nimport { useGlobalState } from '../../providers/index';\nimport { useHistory, Redirect } from 'react-router-dom';\n\nexport const Controller = (props: { socket: any }) => {\n    const isDay = useIsDay();\n    const global = useGlobalState();\n    const history = useHistory();\n\n    const { isOpen, onToggle } = useDisclosure();\n\n    const handleIsOpen = (route: string) => {\n        onToggle();\n        setTimeout(() => {\n            history.push(route);\n        }, 500);\n    }\n\n    React.useLayoutEffect(() => {\n        onToggle();\n    }, [])\n\n    if (global.device === null) {\n        return <Redirect to=\"/device\" />\n    }\n\n    return (\n        <ScaleFade initialScale={0.9} in={isOpen}>\n            <Box display=\"flex\" flexDir=\"column\" minW={300} >\n                <Text color={isDay ? \"black\" : 'white'} fontSize=\"2xl\" fontWeight=\"900\">Controller</Text>\n                <Text color={isDay ? \"black\" : 'white'} marginBottom={4} fontSize=\"xs\">Change the view on the frame</Text>\n                <Divider color=\"whiteAlpha.300\" marginBottom={4} />\n                <Box flexDir=\"row\" flexWrap=\"wrap\" display=\"flex\" justifyContent=\"center\">\n                    <IconButton\n                        aria-label=\"clock\"\n                        maxW=\"30%\"\n                        minH=\"90px\"\n                        fontSize=\"4xl\"\n                        onClick={() => global.device === 'controller' ? props.socket.emit('change', 'clock') : handleIsOpen('/clock')}\n                        m={1}\n                        colorScheme=\"gray\"\n                        isFullWidth\n                        icon={<AiOutlineClockCircle />}\n                    />\n                    <IconButton\n                        aria-label=\"clock\"\n                        maxW=\"30%\"\n                        minH=\"90px\"\n                        fontSize=\"4xl\"\n                        onClick={() => global.device === 'controller' ? props.socket.emit('change', 'weather') : handleIsOpen('/weather')}\n                        m={1} colorScheme=\"gray\" isFullWidth icon={<TiWeatherPartlySunny />}\n                    />\n                    <IconButton\n                        aria-label=\"clock\"\n                        maxW=\"30%\"\n                        minH=\"90px\"\n                        fontSize=\"4xl\"\n                        onClick={() => global.device === 'controller' ? props.socket.emit('change', 'videos') : handleIsOpen('/videos')}\n                        m={1} colorScheme=\"gray\" isFullWidth icon={<AiFillVideoCamera />}\n                    />\n                    <IconButton\n                        aria-label=\"clock\"\n                        maxW=\"30%\"\n                        minH=\"90px\"\n                        fontSize=\"4xl\"\n                        onClick={() => global.device === 'controller' ? props.socket.emit('change', 'digital-clock') : handleIsOpen('/digital-clock')}\n                        m={1} colorScheme=\"gray\" isFullWidth icon={<FaDigitalTachograph />}\n                    />\n                </Box>\n            </Box>\n        </ScaleFade>\n    )\n}","import { getVideosList } from \"../../api\";\nimport {\n    useQuery,\n} from 'react-query'\nimport { Spinner } from \"@chakra-ui/react\";\n\nexport const Video = () => {\n    const { isLoading, data } = useQuery('videos', () => getVideosList());\n    if (isLoading) {\n        return <Spinner size=\"xl\" />\n    }\n    console.log(data)\n    return (\n        <video id=\"videoPlayer\" autoPlay controls={false} width=\"100%\" loop muted playsInline>\n            <source src={`/videos/troy.mp4`} type=\"video/mp4\" />\n            Sorry, your browser doesn't support embedded videos.\n        </video>\n    )\n}","import axios from \"axios\"\n\nexport const changeView = async (view: string) => {\n    await axios.post(`/api/change/${view}`);\n}\n\nexport const getVideosList = () => axios.get('/api/videos/list').then(res => res.data);","import { Box, IconButton, Text } from '@chakra-ui/react';\nimport { AiOutlinePicture } from 'react-icons/ai';\nimport { GiRetroController } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { useGlobalState } from '../../providers/index';\nimport { useIsDay } from '../../hooks/index';\nimport { Divider } from '@chakra-ui/layout';\n\nexport const Device = () => {\n    const { device, setDevice } = useGlobalState();\n    const history = useHistory();\n    const isDay = useIsDay();\n\n    return (\n        <Box color=\"white\" flexWrap=\"wrap\" display=\"flex\" minW={300} flexDir=\"column\">\n            <Text color={isDay ? \"black\" : 'white'} fontSize=\"2xl\" fontWeight=\"900\">Device</Text>\n            <Text color={isDay ? \"black\" : 'white'} marginBottom={4} fontSize=\"xs\">Choose if this is the frame or the controller</Text>\n            <Divider color=\"whiteAlpha.300\" marginBottom={4} />\n            <IconButton\n                onClick={() => {\n                    setDevice('frame')\n                    localStorage.setItem('device', 'frame');\n                    history.push('/controller');\n                }}\n                fontSize=\"6xl\" colorScheme=\"red\" aria-label=\"frame\" minW=\"47%\" minH=\"240px\" m={1} icon={<AiOutlinePicture />}\n            />\n            <IconButton\n                onClick={() => {\n                    setDevice('controller')\n                    localStorage.setItem('device', 'controller');\n                    history.push('/controller');\n                }}\n                fontSize=\"6xl\" colorScheme=\"red\" aria-label=\"controller\" minW=\"47%\" minH=\"240px\" m={1} icon={<GiRetroController />}\n            />\n        </Box>\n    )\n}","import { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/react';\nimport { useIsDay } from '../../hooks';\n\nexport const Future = (props: {\n    forcast: {\n        main: any;\n        weather: any;\n        dt_txt: string;\n    };\n}) => {\n    const isDay = useIsDay();\n    const now = new Date();\n    const forcastTime = new Date(props.forcast.dt_txt);\n    const forcastIn = Math.abs(now.getTime() - forcastTime.getTime());\n    const { main } = props.forcast;\n    const [current] = props.forcast.weather;\n    console.log(props.forcast)\n    return (\n        <Box display=\"flex\" flexDir=\"column\" alignItems=\"center\" padding=\"2em\" margin=\"2em\" borderRadius=\"1em\">\n            <img style={{ maxWidth: '3em' }} alt=\"weather icon\" src={`https://openweathermap.org/img/wn/${current.icon}@4x.png`} />\n            <Text fontWeight=\"300\" fontSize=\"4em\" color={isDay ? \"black\" : \"white\"}>\n                {main.temp.toFixed(0)}\n            </Text>\n            <Text fontWeight=\"500\" fontSize=\"1em\" color={isDay ? \"black\" : \"white\"}>\n                in {(forcastIn/3600000).toFixed(0)} hours\n            </Text>\n        </Box>\n    )\n}","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\n\nexport const DigitalTime = () => {\n    let now = new Date();\n    const [time, setTime] = React.useState(now.toLocaleTimeString());\n    React.useLayoutEffect(() => {\n        const getTime = () => {\n            setTimeout(() => {\n                setTime(new Date().toLocaleTimeString());\n                getTime();\n            }, 1000);\n        }\n        getTime();\n    }, [])\n    return (\n        <Box>\n            {time}\n        </Box>\n    )\n}","import { ScaleFade, Spinner, Text } from '@chakra-ui/react';\nimport { BsFillArrowUpCircleFill } from 'react-icons/bs';\nimport { Box, Divider } from '@chakra-ui/layout';\nimport React from 'react';\nimport axios from 'axios';\nimport { useIsDay } from '../../hooks/index';\nimport { Future } from './Future';\nimport { DigitalTime } from '../DigitalTime';\n\nexport const Weather = () => {\n    const isDay = useIsDay();\n\n    const [weather, setWeather] = React.useState({\n        main: {\n            temp: 0,\n            humidity: 0,\n        },\n        name: '',\n        wind: {\n            speed: 0,\n            deg: 0,\n        },\n        weather: [{\n            icon: '',\n            description: '',\n            main: '',\n        }],\n    });\n    const [forcast, setForcast] = React.useState({\n        list: []\n    });\n\n    const [loading, setloading] = React.useState(true);\n\n    React.useLayoutEffect(() => {\n        const getForcast = async (lat: number, long: number) => {\n            const fcast = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${process.env.REACT_APP_LOCATION}&appid=${process.env.REACT_APP_OPENWEATHERMAP}&units=imperial`);\n            setForcast(fcast.data);\n            setloading(false);\n            console.log(fcast.data);\n        }\n        const getWeather = async () => {\n            const result: any = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${process.env.REACT_APP_LOCATION}&appid=${process.env.REACT_APP_OPENWEATHERMAP}&units=imperial`)\n            console.log(result.data);\n            getForcast(result.data.coord.lat, result.data!.coord.lon);\n            setWeather(result.data);\n            setTimeout(() => {\n                setloading(true);\n                getWeather();\n            }, 300000);\n        }\n        getWeather();\n    }, []);\n    const today = new Date();\n    const [current] = weather.weather;\n\n    if (loading) {\n        return <><Spinner size=\"xl\" /></>\n    }\n    return (\n        <ScaleFade initialScale={0.9} in>\n            <Box display=\"flex\" flexDir=\"column\">\n                <Box display=\"flex\" flexDir=\"row\" alignItems=\"center\">\n                    <Box display=\"flex\" flexDir=\"column\">\n                        <Box p={2} display=\"flex\" justifyContent='flex-start' alignItems='flex-start'>\n                            <Text lineHeight=\"40px\" fontWeight=\"400\" fontSize=\"4em\" color={isDay ? \"black\" : \"white\"}>{weather.name}</Text>\n                        </Box>\n                        <Box p={2} display=\"flex\" justifyContent='flex-start' alignItems='flex-start'>\n                            <Text lineHeight=\"40px\" fontWeight=\"300\" fontSize=\"2em\" color={isDay ? \"black\" : \"white\"}>{today.toDateString()}</Text>\n                        </Box>\n                        <Box pl={2} display=\"flex\" justifyContent='flex-start' alignItems='flex-start'>\n                            <Text lineHeight=\"30px\" fontWeight=\"200\" fontSize=\"1.5em\" color={isDay ? \"black\" : \"white\"}>\n                                <DigitalTime />\n                            </Text>\n                        </Box>\n\n                    </Box>\n                    <Box flexGrow={1} />\n                    <Divider orientation=\"vertical\" />\n                    <Box flexGrow={1} />\n                    <Box>\n                        <Box display=\"flex\" justifyContent='flex-start' alignItems='flex-start'>\n                            <img alt=\"weather icon\" src={`https://openweathermap.org/img/wn/${current.icon}@4x.png`} />\n                        </Box>\n                    </Box>\n                </Box>\n                <Divider mt={5} mb={5} opacity={isDay ? 0.5 : 0.1} />\n                <Box display=\"flex\" flexDir=\"row\">\n                    <Box pt={5} display=\"flex\" justifyContent='flex-start' alignItems='flex-start' flexDir='column'>\n                        <Text lineHeight=\"0.9em\" fontWeight=\"100\" fontSize=\"14em\" color={isDay ? \"black\" : \"white\"}>{weather.main.temp.toFixed(0)}°</Text>\n                        <Text fontWeight=\"100\" fontSize=\"2em\" color={isDay ? \"black\" : \"white\"}>{current.main}, {current.description}</Text>\n                    </Box>\n                    <Box flexGrow={1} />\n                    <Divider orientation=\"vertical\" />\n                    <Box flexGrow={1} />\n                    <Box display=\"flex\" justifyContent='flex-end' alignItems='center' flexDir='column'>\n                        <BsFillArrowUpCircleFill color={isDay ? \"black\" : \"white\"} fontSize=\"72px\" style={{ transform: `rotate(${weather.wind.deg}deg)`, transition: 'transform 1250ms ease-in-out' }} />\n                        <Text lineHeight=\"60px\" fontWeight=\"200\" fontSize=\"3em\" color={isDay ? \"black\" : \"white\"}>{weather.wind.speed}mph</Text>\n                        <Text fontWeight=\"100\" fontSize=\"2em\" color={isDay ? \"black\" : \"white\"}>Wind Direction</Text>\n                    </Box>\n                    <Box flexGrow={1} />\n                </Box>\n                <Divider mt={12} opacity={isDay ? 0.5 : 0.1} />\n                <Box display=\"flex\" justifyContent='flex-start' alignItems='flex-start' flexDir='row' width=\"100%\">\n                    {forcast.list.map((item, index) => {\n                        if (index < 4) {\n                            return (\n                                <>\n                                    <Box flexGrow={1} />\n                                    <Future forcast={item} />\n                                    <Box flexGrow={1} />\n                                </>\n                            )\n                        }\n                        return null\n                    })}\n                </Box>\n                {/* <Box p={10} display=\"flex\" justifyContent='flex-start' alignItems='center'>\n                    <Text lineHeight=\"150px\" fontWeight=\"100\" fontSize=\"200px\" color={isDay ? \"black\" : \"white\"}>{weather.main.temp.toFixed(0)}°</Text>\n                </Box>\n                <Box p={10} display=\"flex\" justifyContent='flex-start' alignItems='center'>\n                    <Text lineHeight=\"40px\" fontWeight=\"100\" fontSize=\"70px\" color={isDay ? \"black\" : \"white\"}>{weather.name}</Text>\n                </Box>\n                <Box p={10} display=\"flex\" justifyContent='center' alignItems='flex-start' flexDir=\"row\">\n                    <Box p={10} display=\"flex\" justifyContent='center' alignItems='flex-start' flexDir=\"column\">\n                        <Text lineHeight=\"60px\" fontWeight=\"100\" fontSize=\"100px\" color={isDay ? \"black\" : \"white\"}>{weather.main.humidity.toFixed(0)}%</Text>\n                        <Text fontWeight=\"100\" fontSize=\"40px\" color={isDay ? \"black\" : \"white\"}>HUMIDITY</Text>\n                    </Box>\n                    <Box p={10} display=\"flex\" justifyContent='center' alignItems='flex-start' flexDir=\"column\">\n                        <Box display=\"flex\" flexDir=\"row\">\n                            <Text lineHeight=\"60px\" fontWeight=\"100\" fontSize=\"100px\" color={isDay ? \"black\" : \"white\"}>{weather.wind.speed}mph</Text> */}\n                {/* </Box>\n                        <Text fontWeight=\"100\" fontSize=\"40px\" color={isDay ? \"black\" : \"white\"}>WIND</Text>\n                    </Box>\n                </Box> */}\n\n            </Box>\n        </ScaleFade>\n    );\n}","import { Box } from '@chakra-ui/layout';\nimport { Fade, Text } from '@chakra-ui/react';\n\nimport React from 'react';\n\nexport const DigitalClock = () => {\n    let now = new Date();\n    const [time, setTime] = React.useState(now.toLocaleTimeString());\n    React.useLayoutEffect(() => {\n        const getTime = () => {\n            setTimeout(() => {\n                setTime(new Date().toLocaleTimeString());\n                getTime();\n            }, 1000);\n        }\n        getTime();\n    }, [])\n    return (\n        <Fade in>\n            <Box>\n                <Text fontSize=\"8em\">{time}</Text>\n            </Box>\n        </Fade>\n    )\n}","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { Clock } from '../components/Clock/index';\nimport { Controller } from '../components/Controller';\nimport { Video } from '../components/Video/index';\nimport { Device } from '../components/Device/index';\nimport { Weather } from '../components/Weather';\nimport { DigitalClock } from '../components/DigitalClock/index';\n\nexport const Routes = (props: { socket: any, device: string }) => {\n    return (\n        <Switch>\n            <Route path=\"/weather\">\n                <Weather />\n            </Route>\n            <Route path=\"/clock\">\n                <Clock />\n            </Route>\n            <Route path=\"/digital-clock\">\n                <DigitalClock />\n            </Route>\n            <Route path=\"/videos\">\n                <Video />\n            </Route>\n            <Route path=\"/controller\">\n                <Controller socket={props.socket} />\n            </Route>\n            <Route path=\"/device\">\n                <Device />\n            </Route>\n            <Route path=\"/*\">\n                <Redirect to=\"/controller\" />\n            </Route>\n        </Switch>\n    )\n}","import './App.css';\nimport React from 'react';\nimport { Box, IconButton } from '@chakra-ui/react';\nimport { Routes } from './routes';\nimport { useIsDay } from './hooks/index';\nimport { CgController } from 'react-icons/cg';\nimport { Link, useHistory } from 'react-router-dom';\nimport { isMobile } from 'react-device-detect';\nimport { io } from \"socket.io-client\";\nimport { Provider } from './providers';\n\nconst socket = io('http://192.168.124.124:4000');\n\nconst App = () => {\n  const isDay = useIsDay();\n  const histroy = useHistory();\n  const [device, setDevice] = React.useState(localStorage.getItem('device'))\n\n  React.useEffect(() => {\n    socket.on(\"change_view\", (view) => {\n      console.log(view)\n      if (device === 'frame') {\n        histroy.push(`/${view}`);\n      }\n    });\n  }, []);\n\n  return (\n    <Provider socket={socket} device={device} setDevice={setDevice}>\n      <Box\n        height={window.innerHeight}\n        width={window.innerWidth}\n        display=\"flex\"\n        alignItems={isMobile ? \"flex-start\" : \"center\"}\n        justifyContent='center'\n        style={{\n          backgroundColor: isDay ? '#fff' : '#000'\n        }}\n        pt={isMobile && 8}\n      >\n        <Routes socket={socket} device={device} />\n        <Link to=\"/controller\">\n          <IconButton colorScheme=\"gray\" size=\"lg\" icon={<CgController />} style={{\n            position: 'fixed',\n            bottom: 0,\n            right: 0,\n            borderRadius: '5px 0px 0px',\n            minHeight: 70,\n            minWidth: 70\n          }} />\n        </Link>\n      </Box>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from 'react-query';\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider>\n        <Router>\n          <App />\n        </Router>\n      </ChakraProvider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}